import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    ext {
        log4jVersion = "1.2.17"
        assertjVersion = "3.23.1"
        restAssuredVersion = "5.1.1"
        smallryeVertxClientVersion = "2.24.1"
        quarkiversNeo4JVersion = "1.3.2"
        testcontainersNeo4JVersion = "1.17.3"
        quarkusVersion = "2.11.0.Final"
        kotlinVersion = "1.6.21"
        javaVersion = "11"
    }
}

plugins {
    //id("kotlin-conventions")
    id("org.jetbrains.kotlin.jvm")
    id("org.jetbrains.kotlin.plugin.allopen") version "${kotlinVersion}"
    id("io.quarkus") version "${quarkusVersion}"
    //id("org.jlleitschuh.gradle.ktlint") version "10.2.1"
    //id("org.kordamp.gradle.jandex") version "0.12.0"
    //id("org.sonarqube").version("3.3")
    //id("net.ltgt.errorprone") version "2.0.2"
}

group = "de.akrebs.web"
version = "1.0.0-SNAPSHOT"

configurations {
    axel
}

dependencies {
    implementation(enforcedPlatform("org.jetbrains.kotlin:kotlin-bom:$kotlinVersion"))
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation enforcedPlatform("io.quarkus:quarkus-bom:$quarkusVersion")
    implementation "io.quarkus:quarkus-kotlin"
    implementation "io.quarkus:quarkus-arc"
    implementation("io.quarkus:quarkus-config-yaml:$quarkusVersion")
    //implementation("io.quarkus:quarkus-hibernate-validator:$quarkusVersion")
    implementation "io.quarkus:quarkus-resteasy-reactive:$quarkusVersion"
    implementation "io.quarkus:quarkus-resteasy-reactive-jackson:$quarkusVersion"
    implementation("io.quarkus:quarkus-resteasy-reactive-qute:$quarkusVersion")
    //implementation("io.quarkus:quarkus-vertx:$quarkusVersion")
    //implementation("io.quarkus:quarkus-vertx-web:$quarkusVersion")
    //implementation("io.quarkus:quarkus-reactive-routes:$quarkusVersion")
    //implementation("io.quarkiverse.neo4j:quarkus-neo4j:$quarkiversNeo4JVersion")
    //implementation("log4j:log4j:$log4jVersion")
    //implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0")
    // Testing
    //testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "io.quarkus:quarkus-junit5:$quarkusVersion"
    testImplementation "io.rest-assured:rest-assured:$restAssuredVersion"
    //testImplementation("io.smallrye.reactive:smallrye-mutiny-vertx-web-client:$smallryeVertxClientVersion")
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "org.hamcrest:hamcrest-all:1.3"
    //testImplementation("org.testcontainers:testcontainers:$testcontainersNeo4JVersion")
    //testImplementation("org.testcontainers:neo4j:$testcontainersNeo4JVersion")
}

kotlin {
    // by defining the Java toolchain, overriding the Java compile task becomes unfeasible..
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of("$javaVersion"))
    }
}

test {
    useJUnitPlatform()
    jvmArgs("--add-opens", "java.base/java.lang=ALL-UNNAMED")
    jvmArgs("--add-opens", "java.base/java.lang.invoke=ALL-UNNAMED")
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}

allOpen {
    annotation("javax.ws.rs.Path")
    annotation("javax.enterprise.context.ApplicationScoped")
    annotation("io.quarkus.runtime.annotations.QuarkusMain")
    annotation("io.quarkus.test.junit.QuarkusTest")
    //annotation("io.quarkus.vertx.web.Route")
}

quarkus {
    //workingDirectory.set(projectDir)
    //outputDirectory.set("$projectDir/build/classes/kotlin/main")
//    sourceSets {
//        extraNativeTest = project.sourceSets.integrationTest
//    }
}

// The Quarkus plugin seems to ignore the Kotlin sources!
quarkusDev {
    //sourceDir = "$projectDir/src/main/kotlin"
    //setSourceDir("$projectDir/src/main/kotlin")
    setWorkingDirectory(project.projectDir)
    compilerOptions {
        compiler("kotlin").args(["-Werror"])
    }
}

quarkusBuild {
    nativeArgs {
        containerBuild = true
        builderImage = "quay.io/quarkus/ubi-quarkus-native-image:22.1-java11"
    }
}

tasks.withType(KotlinCompile) {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11.toString()
    kotlinOptions.javaParameters = true
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

tasks.withType(Jar) {
    manifest {
        attributes["Main-Class"] = "Bootstrap"
    }
}

tasks.withType(GenerateModuleMetadata) {
    suppressedValidationErrors.add("enforced-platform")
}
